package com.capgemini.carwash.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.capgemini.carwash.entity.AddOn;
import com.capgemini.carwash.exception.BadRequestException;
import com.capgemini.carwash.service.AddOnService;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@CrossOrigin //(origins = "http://localhost:4200")
@RequestMapping("/api")
public class AddOnController {

	@Autowired
	private AddOnService addOnService;
	
	@GetMapping("/addon/addonlisting")
	public ResponseEntity<?> getAllAddOnDetails(){
	//	List<AddOn> addOnList = addOnService.getAllAddOnList();
		Map<Object, Object> addonMap = new HashMap<Object, Object>();
		addonMap.put("status", "success");
		addonMap.put("data", addOnService.getAllAddOnList());
		log.info("---Fetching all the AddOn Details---");
		return ResponseEntity.ok(addonMap);
	}
	
	@GetMapping("/addonid/{id}")
	public ResponseEntity<?> getAddOnById(@PathVariable("id") String addonid){
		Optional<AddOn> addOn = addOnService.getByAddOnid(addonid);
		log.info("---Searching for a Addon with id {} ", addonid);
		if(!addOn.isPresent()) {
			log.error("Id "+ addonid + " is not existed");
			ResponseEntity.badRequest().build();
		}
		log.info("---Fetching AddOn Details by id---");
		return ResponseEntity.ok(addOn.get());
	}
	
	@PostMapping("/addon/store")
	public ResponseEntity<?> saveAddOnDetails(@RequestBody AddOn addOn){
		Random random = new Random();
		addOn.setAddonid(random(100));
		Optional<AddOn> addon = addOnService.getByAddOnid(addOn.getAddonid());
		if(!addon.isPresent()) {
			AddOn addons = addOnService.saveAddOnDetails(addOn);
			log.info("---Save AddOn details---");
			return ResponseEntity.ok(addons);
		}
		log.error("Id is already exist");
		throw new BadRequestException("Id is already exist");
	}
	
	@DeleteMapping("/delete/addon/{id}")
	public ResponseEntity<?> deleteAddOnById(@PathVariable("id") String addonid){
		Optional<AddOn> addon = addOnService.getByAddOnid(addonid);
		if(!addon.isPresent()) {
			addOnService.deleteByAddOnid(addonid);
		}else{
			throw new BadRequestException("Id dosen't exist");
		}
		log.info("---Delete AddOn details---");
		return ResponseEntity.ok(addon);
	}
	
}
