package com.capgemini.carwash.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.capgemini.carwash.entity.PromoCode;
import com.capgemini.carwash.exception.BadRequestException;
import com.capgemini.carwash.repository.PromoCodeRepository;
import com.capgemini.carwash.service.PromoCodeService;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@CrossOrigin //(origins = "http://localhost:4200")
@RequestMapping("/api")
public class PromoCodeController {

	@Autowired
	private PromoCodeService promoCodeService;
	
	@Autowired
	private PromoCodeRepository promoCodeRepository;
	
	@GetMapping("/promocode/pclisting")
	public ResponseEntity<?> getAllPromoCode(){
//		List<PromoCode> pcList = promoCodeService.getAllPromoCode();
		Map<Object, Object> pcMap = new HashMap<Object, Object>();
		pcMap.put("status", "success");
		pcMap.put("data", promoCodeService.getAllPromoCode());
		log.info("---Fetching all the PromoCode Details---");
		return ResponseEntity.ok(pcMap);
	}
	
	@GetMapping("/promocode/{id}")
	public ResponseEntity<?> getPromoCodeById(@PathVariable("id") Long promocodeid){
		Optional<PromoCode> pcOptional = promoCodeService.getByPCId(promocodeid);
		log.info("---Searching for a PromoCode with id {} ", promocodeid);
		if(!pcOptional.isPresent()) {
			log.error("Id "+ promocodeid + " is not existed");
			ResponseEntity.badRequest().build();
		}
		return ResponseEntity.ok(pcOptional.get());
	}
	
	@PostMapping("/promocode/store")
	public ResponseEntity<?> storePromoCodeDetails(@RequestBody PromoCode code){
		Random random = new Random();
		code.setPromocodeid(random.nextLong(100l));
		Optional<PromoCode> pcOptional = promoCodeService.getByPCId(code.getPromocodeid());
		if(!pcOptional.isPresent()) {
			PromoCode pc = promoCodeRepository.save(code);
			log.info("---Save PromoCode details---");
			return ResponseEntity.ok(pc);
		}
		throw new BadRequestException("Id is Already Exist");		
	}
	
	@DeleteMapping("/promocode/delete/{id}")
	public ResponseEntity<?> deleteByPCId(@PathVariable("id") Long promocodeid){
		Optional<PromoCode> pcOptional = promoCodeService.getByPCId(promocodeid);
		if(!pcOptional.isPresent()) {
			promoCodeRepository.deleteById(promocodeid);
		}else {
			throw new BadRequestException("Id dose not Exist");
		}
		log.info("---Delete Promocode details---");
		return ResponseEntity.ok(pcOptional);
	}
}
